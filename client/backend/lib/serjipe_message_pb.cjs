// source: serjipe_message.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.Command', null, global);
goog.exportSymbol('proto.DeviceData', null, global);
goog.exportSymbol('proto.DeviceInfo', null, global);
goog.exportSymbol('proto.Discover', null, global);
goog.exportSymbol('proto.Envelope', null, global);
goog.exportSymbol('proto.Envelope.CargaCase', null, global);
goog.exportSymbol('proto.ListarDispositivos', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeviceData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DeviceData.repeatedFields_, null);
};
goog.inherits(proto.DeviceData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DeviceData.displayName = 'proto.DeviceData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeviceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeviceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DeviceInfo.displayName = 'proto.DeviceInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Command = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Command, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Command.displayName = 'proto.Command';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Discover = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Discover, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Discover.displayName = 'proto.Discover';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ListarDispositivos = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ListarDispositivos.repeatedFields_, null);
};
goog.inherits(proto.ListarDispositivos, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ListarDispositivos.displayName = 'proto.ListarDispositivos';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Envelope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Envelope.oneofGroups_);
};
goog.inherits(proto.Envelope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Envelope.displayName = 'proto.Envelope';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DeviceData.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeviceData.prototype.toObject = function(opt_includeInstance) {
  return proto.DeviceData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeviceData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeviceData.toObject = function(includeInstance, msg) {
  var f, obj = {
deviceId: jspb.Message.getFieldWithDefault(msg, 1, ""),
status: jspb.Message.getFieldWithDefault(msg, 2, ""),
valueNameList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
valueList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
timestamp: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeviceData}
 */
proto.DeviceData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeviceData;
  return proto.DeviceData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeviceData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeviceData}
 */
proto.DeviceData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addValueName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addValue(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeviceData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeviceData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeviceData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeviceData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValueNameList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getValueList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string device_id = 1;
 * @return {string}
 */
proto.DeviceData.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.DeviceData} returns this
 */
proto.DeviceData.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string status = 2;
 * @return {string}
 */
proto.DeviceData.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.DeviceData} returns this
 */
proto.DeviceData.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string value_name = 3;
 * @return {!Array<string>}
 */
proto.DeviceData.prototype.getValueNameList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.DeviceData} returns this
 */
proto.DeviceData.prototype.setValueNameList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.DeviceData} returns this
 */
proto.DeviceData.prototype.addValueName = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DeviceData} returns this
 */
proto.DeviceData.prototype.clearValueNameList = function() {
  return this.setValueNameList([]);
};


/**
 * repeated string value = 4;
 * @return {!Array<string>}
 */
proto.DeviceData.prototype.getValueList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.DeviceData} returns this
 */
proto.DeviceData.prototype.setValueList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.DeviceData} returns this
 */
proto.DeviceData.prototype.addValue = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DeviceData} returns this
 */
proto.DeviceData.prototype.clearValueList = function() {
  return this.setValueList([]);
};


/**
 * optional string timestamp = 5;
 * @return {string}
 */
proto.DeviceData.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.DeviceData} returns this
 */
proto.DeviceData.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeviceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.DeviceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeviceInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeviceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
deviceId: jspb.Message.getFieldWithDefault(msg, 1, ""),
type: jspb.Message.getFieldWithDefault(msg, 2, ""),
ip: jspb.Message.getFieldWithDefault(msg, 3, ""),
port: jspb.Message.getFieldWithDefault(msg, 4, 0),
data: (f = msg.getData()) && proto.DeviceData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeviceInfo}
 */
proto.DeviceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeviceInfo;
  return proto.DeviceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeviceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeviceInfo}
 */
proto.DeviceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 5:
      var value = new proto.DeviceData;
      reader.readMessage(value,proto.DeviceData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeviceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeviceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeviceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeviceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.DeviceData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string device_id = 1;
 * @return {string}
 */
proto.DeviceInfo.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.DeviceInfo} returns this
 */
proto.DeviceInfo.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.DeviceInfo.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.DeviceInfo} returns this
 */
proto.DeviceInfo.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string ip = 3;
 * @return {string}
 */
proto.DeviceInfo.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.DeviceInfo} returns this
 */
proto.DeviceInfo.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 port = 4;
 * @return {number}
 */
proto.DeviceInfo.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.DeviceInfo} returns this
 */
proto.DeviceInfo.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional DeviceData data = 5;
 * @return {?proto.DeviceData}
 */
proto.DeviceInfo.prototype.getData = function() {
  return /** @type{?proto.DeviceData} */ (
    jspb.Message.getWrapperField(this, proto.DeviceData, 5));
};


/**
 * @param {?proto.DeviceData|undefined} value
 * @return {!proto.DeviceInfo} returns this
*/
proto.DeviceInfo.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DeviceInfo} returns this
 */
proto.DeviceInfo.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DeviceInfo.prototype.hasData = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Command.prototype.toObject = function(opt_includeInstance) {
  return proto.Command.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Command} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Command.toObject = function(includeInstance, msg) {
  var f, obj = {
deviceId: jspb.Message.getFieldWithDefault(msg, 1, ""),
action: jspb.Message.getFieldWithDefault(msg, 2, ""),
parameter: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Command}
 */
proto.Command.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Command;
  return proto.Command.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Command} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Command}
 */
proto.Command.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setParameter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Command.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Command.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Command} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Command.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAction();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getParameter();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string device_id = 1;
 * @return {string}
 */
proto.Command.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Command} returns this
 */
proto.Command.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string action = 2;
 * @return {string}
 */
proto.Command.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Command} returns this
 */
proto.Command.prototype.setAction = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string parameter = 3;
 * @return {string}
 */
proto.Command.prototype.getParameter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Command} returns this
 */
proto.Command.prototype.setParameter = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Discover.prototype.toObject = function(opt_includeInstance) {
  return proto.Discover.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Discover} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Discover.toObject = function(includeInstance, msg) {
  var f, obj = {
ip: jspb.Message.getFieldWithDefault(msg, 1, ""),
portMulticast: jspb.Message.getFieldWithDefault(msg, 2, 0),
portUdpSensor: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Discover}
 */
proto.Discover.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Discover;
  return proto.Discover.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Discover} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Discover}
 */
proto.Discover.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPortMulticast(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPortUdpSensor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Discover.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Discover.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Discover} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Discover.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPortMulticast();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPortUdpSensor();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.Discover.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Discover} returns this
 */
proto.Discover.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 port_multicast = 2;
 * @return {number}
 */
proto.Discover.prototype.getPortMulticast = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Discover} returns this
 */
proto.Discover.prototype.setPortMulticast = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 port_udp_sensor = 3;
 * @return {number}
 */
proto.Discover.prototype.getPortUdpSensor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Discover} returns this
 */
proto.Discover.prototype.setPortUdpSensor = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ListarDispositivos.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ListarDispositivos.prototype.toObject = function(opt_includeInstance) {
  return proto.ListarDispositivos.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ListarDispositivos} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListarDispositivos.toObject = function(includeInstance, msg) {
  var f, obj = {
amount: jspb.Message.getFieldWithDefault(msg, 1, ""),
devicesList: jspb.Message.toObjectList(msg.getDevicesList(),
    proto.DeviceInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ListarDispositivos}
 */
proto.ListarDispositivos.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ListarDispositivos;
  return proto.ListarDispositivos.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ListarDispositivos} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ListarDispositivos}
 */
proto.ListarDispositivos.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 2:
      var value = new proto.DeviceInfo;
      reader.readMessage(value,proto.DeviceInfo.deserializeBinaryFromReader);
      msg.addDevices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ListarDispositivos.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ListarDispositivos.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ListarDispositivos} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListarDispositivos.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDevicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.DeviceInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string amount = 1;
 * @return {string}
 */
proto.ListarDispositivos.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ListarDispositivos} returns this
 */
proto.ListarDispositivos.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated DeviceInfo devices = 2;
 * @return {!Array<!proto.DeviceInfo>}
 */
proto.ListarDispositivos.prototype.getDevicesList = function() {
  return /** @type{!Array<!proto.DeviceInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DeviceInfo, 2));
};


/**
 * @param {!Array<!proto.DeviceInfo>} value
 * @return {!proto.ListarDispositivos} returns this
*/
proto.ListarDispositivos.prototype.setDevicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.DeviceInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DeviceInfo}
 */
proto.ListarDispositivos.prototype.addDevices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.DeviceInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ListarDispositivos} returns this
 */
proto.ListarDispositivos.prototype.clearDevicesList = function() {
  return this.setDevicesList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Envelope.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.Envelope.CargaCase = {
  CARGA_NOT_SET: 0,
  DISCOVER: 1,
  COMMAND: 2,
  DEVICE_DATA: 3,
  DEVICE_INFO: 4,
  LISTAR_DISPOSITIVOS: 5
};

/**
 * @return {proto.Envelope.CargaCase}
 */
proto.Envelope.prototype.getCargaCase = function() {
  return /** @type {proto.Envelope.CargaCase} */(jspb.Message.computeOneofCase(this, proto.Envelope.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Envelope.prototype.toObject = function(opt_includeInstance) {
  return proto.Envelope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Envelope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Envelope.toObject = function(includeInstance, msg) {
  var f, obj = {
discover: (f = msg.getDiscover()) && proto.Discover.toObject(includeInstance, f),
command: (f = msg.getCommand()) && proto.Command.toObject(includeInstance, f),
deviceData: (f = msg.getDeviceData()) && proto.DeviceData.toObject(includeInstance, f),
deviceInfo: (f = msg.getDeviceInfo()) && proto.DeviceInfo.toObject(includeInstance, f),
listarDispositivos: (f = msg.getListarDispositivos()) && proto.ListarDispositivos.toObject(includeInstance, f),
erro: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Envelope}
 */
proto.Envelope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Envelope;
  return proto.Envelope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Envelope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Envelope}
 */
proto.Envelope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Discover;
      reader.readMessage(value,proto.Discover.deserializeBinaryFromReader);
      msg.setDiscover(value);
      break;
    case 2:
      var value = new proto.Command;
      reader.readMessage(value,proto.Command.deserializeBinaryFromReader);
      msg.setCommand(value);
      break;
    case 3:
      var value = new proto.DeviceData;
      reader.readMessage(value,proto.DeviceData.deserializeBinaryFromReader);
      msg.setDeviceData(value);
      break;
    case 4:
      var value = new proto.DeviceInfo;
      reader.readMessage(value,proto.DeviceInfo.deserializeBinaryFromReader);
      msg.setDeviceInfo(value);
      break;
    case 5:
      var value = new proto.ListarDispositivos;
      reader.readMessage(value,proto.ListarDispositivos.deserializeBinaryFromReader);
      msg.setListarDispositivos(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setErro(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Envelope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Envelope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Envelope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Envelope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDiscover();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Discover.serializeBinaryToWriter
    );
  }
  f = message.getCommand();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Command.serializeBinaryToWriter
    );
  }
  f = message.getDeviceData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.DeviceData.serializeBinaryToWriter
    );
  }
  f = message.getDeviceInfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.DeviceInfo.serializeBinaryToWriter
    );
  }
  f = message.getListarDispositivos();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ListarDispositivos.serializeBinaryToWriter
    );
  }
  f = message.getErro();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional Discover discover = 1;
 * @return {?proto.Discover}
 */
proto.Envelope.prototype.getDiscover = function() {
  return /** @type{?proto.Discover} */ (
    jspb.Message.getWrapperField(this, proto.Discover, 1));
};


/**
 * @param {?proto.Discover|undefined} value
 * @return {!proto.Envelope} returns this
*/
proto.Envelope.prototype.setDiscover = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.Envelope.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Envelope} returns this
 */
proto.Envelope.prototype.clearDiscover = function() {
  return this.setDiscover(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Envelope.prototype.hasDiscover = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Command command = 2;
 * @return {?proto.Command}
 */
proto.Envelope.prototype.getCommand = function() {
  return /** @type{?proto.Command} */ (
    jspb.Message.getWrapperField(this, proto.Command, 2));
};


/**
 * @param {?proto.Command|undefined} value
 * @return {!proto.Envelope} returns this
*/
proto.Envelope.prototype.setCommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.Envelope.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Envelope} returns this
 */
proto.Envelope.prototype.clearCommand = function() {
  return this.setCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Envelope.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DeviceData device_data = 3;
 * @return {?proto.DeviceData}
 */
proto.Envelope.prototype.getDeviceData = function() {
  return /** @type{?proto.DeviceData} */ (
    jspb.Message.getWrapperField(this, proto.DeviceData, 3));
};


/**
 * @param {?proto.DeviceData|undefined} value
 * @return {!proto.Envelope} returns this
*/
proto.Envelope.prototype.setDeviceData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.Envelope.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Envelope} returns this
 */
proto.Envelope.prototype.clearDeviceData = function() {
  return this.setDeviceData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Envelope.prototype.hasDeviceData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DeviceInfo device_info = 4;
 * @return {?proto.DeviceInfo}
 */
proto.Envelope.prototype.getDeviceInfo = function() {
  return /** @type{?proto.DeviceInfo} */ (
    jspb.Message.getWrapperField(this, proto.DeviceInfo, 4));
};


/**
 * @param {?proto.DeviceInfo|undefined} value
 * @return {!proto.Envelope} returns this
*/
proto.Envelope.prototype.setDeviceInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.Envelope.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Envelope} returns this
 */
proto.Envelope.prototype.clearDeviceInfo = function() {
  return this.setDeviceInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Envelope.prototype.hasDeviceInfo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ListarDispositivos listar_dispositivos = 5;
 * @return {?proto.ListarDispositivos}
 */
proto.Envelope.prototype.getListarDispositivos = function() {
  return /** @type{?proto.ListarDispositivos} */ (
    jspb.Message.getWrapperField(this, proto.ListarDispositivos, 5));
};


/**
 * @param {?proto.ListarDispositivos|undefined} value
 * @return {!proto.Envelope} returns this
*/
proto.Envelope.prototype.setListarDispositivos = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.Envelope.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Envelope} returns this
 */
proto.Envelope.prototype.clearListarDispositivos = function() {
  return this.setListarDispositivos(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Envelope.prototype.hasListarDispositivos = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string erro = 6;
 * @return {string}
 */
proto.Envelope.prototype.getErro = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.Envelope} returns this
 */
proto.Envelope.prototype.setErro = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


goog.object.extend(exports, proto);
